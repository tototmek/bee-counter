#include "fmt/core.h"
#include <Arduino.h>

#include "gate.h"
#include "connection.h"

#define PRIMARY_MCU
// #define SECONDARY_MCU

bee_counter::connection::Connection connection{4};

bee_counter::GateConfig gateConfig[bee_counter::kNumGates] = {{.chargePin = 9,
                                                  .measurePinL = 20,
                                                  .measurePinR = 10,
                                                  .invertDirection = false},
                                                 {.chargePin = 4,
                                                  .measurePinL = 0,
                                                  .measurePinR = 21,
                                                  .invertDirection = true},
                                                 {.chargePin = 6,
                                                  .measurePinL = 5,
                                                  .measurePinR = 7,
                                                  .invertDirection = false},
                                                 {.chargePin = 2,
                                                  .measurePinL = 3,
                                                  .measurePinR = 1,
                                                  .invertDirection = true}};
bee_counter::Gate gate[bee_counter::kNumGates] = {gateConfig[0], gateConfig[1], gateConfig[2], gateConfig[3]};
bee_counter::gate_reading_t measurements[2*bee_counter::kNumGates] = {0};


void setup() {
    Serial.begin(115200);
    for (int i = 0; i < bee_counter::kNumGates; ++i) {
        gate[i].initialize();
    }
    connection.initialize();
}

bee_counter::gate_reading_t reading;

void loop() {
    #ifdef SECONDARY_MCU
    // The secondary mcu sends the gate measurements to the primary mcu and returns.
        for (int i = 0; i < bee_counter::kNumGates; ++i) {
            measurements[i] = gate[i].measure();
            measurements[i].gateId = i+bee_counter::kNumGates;
            measurements[i].timeRawL = i+1;
            measurements[i].timeRawR = (1+i)*10 + i + 1;
            connection.sendReading(&measurements[i]);
        }
        delay(10);
        return;
    #else

    // Primary mcu performs all the calculations and communicates with pc.
    // In the future, the mcus should split the calculations and send only the processed data via uart.

    for (int i = 0; i < bee_counter::kNumGates; ++i) {
        measurements[i] = gate[i].measure();
    }
    for (int i = 0; i < bee_counter::kNumGates; ++i) { // Read 4 gates. Don't care about the order in which they arrive
        connection.receiveReading(&reading, 15);
        measurements[reading.gateId] = reading;
    }

    std::string message =
        fmt::format("{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}", millis(),
                    measurements[0].timeRawL, measurements[0].timeRawR,
                    measurements[1].timeRawL, measurements[1].timeRawR,
                    measurements[2].timeRawL, measurements[2].timeRawR,
                    measurements[3].timeRawL, measurements[3].timeRawR,
                    measurements[4].timeRawL, measurements[4].timeRawR,
                    measurements[5].timeRawL, measurements[5].timeRawR,
                    measurements[6].timeRawL, measurements[6].timeRawR,
                    measurements[7].timeRawL, measurements[7].timeRawR);
    Serial.print(message.c_str());
    Serial.println();

    #endif // SECONDARY_MCU
}